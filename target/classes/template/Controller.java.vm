package${package}.controller;

import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Lists;
import ${package}.controller.AbstractController;
import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import ${package}.utils.PageUtils;
import ${package}.utils.Query;
import ${package}.utils.result.R;
import ${package}.utils.validator.ValidatorUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@CrossOrigin
@RestController
@RequestMapping("${pathName}")
public class ${className}Controller extends AbstractController {
    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private ${className}Service ${classname}Service;
    @Resource
    private BeanMapper beanMapper;

    /**
     * 列表
     */
    @RequestMapping("/list")
    @RequiresPermissions("${pathName}:list")
    public R list(@RequestParam Map<String, Object> params) {
        //查询列表数据
        Query query = new Query(params);

        List<${className}Entity> ${classname}List = ${classname}Service.queryList(query);
        int total = ${classname}Service.queryTotal(query);

        PageUtils pageUtil = new PageUtils(${classname}List, total, query.getLimit(), query.getPage());

        return R.ok().putObj("page", pageUtil);
    }


    /**
     * 信息
     */
    @RequestMapping("/info/{${pk.attrname}}")
    @RequiresPermissions("${pathName}:info")
    public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
            ${className}Entity ${classname} = ${classname}Service.queryObject(${pk.attrname});

        return R.ok().putObj("${classname}", ${classname});
    }

    /**
     * 保存
     */
    @RequestMapping("/save")
    @RequiresPermissions("${pathName}:save")
    public R save(@RequestBody ${className}Entity ${classname}) {

        //${classname}.setCreatetime(new Date());
        // ${classname}.setCreateuser(getUserId().toString());
        ValidatorUtils.validateEntity(${classname});
            ${classname}Service.save(${classname});

        return R.ok();
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    @RequiresPermissions("${pathName}:update")
    public R update(@RequestBody ${className}Entity ${classname}) {

            //${classname}.setModifyuser(getUserId().toString());
            //${classname}.setModifytime(new Date());

        ValidatorUtils.validateEntity(${classname});
            ${classname}Service.update(${classname});

        return R.ok();
    }

    /**
     * 删除
     */
    @RequestMapping("/delete")
    @RequiresPermissions("${pathName}:delete")
    public R delete(@RequestBody ${pk.attrType}[]${pk.attrname}s) {

        //一下两种删除根据情况自己选择

        //物理删除
         //${classname}Service.deleteBatch(${pk.attrname}s);

        //逻辑删除
        //List<String> ${pk.attrname}Str = Stream.of(${pk.attrname}s).map(String::valueOf).collect(Collectors.toList());
        //${classname}Service.multiOperate(${pk.attrname}Str, Constant.Status.delete);

        return R.ok();
    }

   /**
    * 根据${pk.attrname}修改${pathName}状态
    * 这里是一个通用操作，如： 上下架、删除、启用，禁用 等等状态改变的使用这个一个方法就够了
    *
    * @param modelId: 编号,字段名:modelIds,必填
    * @param status: 操作类型,字段名:status,-1锁定,0无效,1正常,2发布,3删除,选填,默认删除操作, 参考常量Constant.Status
    */
    @RequiresPermissions("${pathName}:delete")
    @RequestMapping(value="operate${className}By${pk.attrName}s")
    public XaResult operateByIds (
            @RequestParam(value = "modelIds") ${pk.attrType}[] ${pk.attrname}s,
            @RequestParam(defaultValue = "3") Integer status
    ) {
        List<String> ${pk.attrname}Str = Stream.of(${pk.attrname}s).map(String::valueOf).collect(Collectors.toList());
        ${classname}Service.multiOperate(${pk.attrname}Str, status);
        return R.ok();
    }

    /**
    * 如果指定行，就按照指定行导出，否则 导出所有数据成excel格式
    */
    @RequestMapping("/exportsExcelAll")
    @RequiresPermissions("${pathName}:list")
    @SuppressWarnings("unchecked")
    public void exportsExcelAll(@RequestParam Map<String, Object> params , @RequestParam Boolean isCvs, @RequestParam String[] modelIds,  HttpServletRequest request,
                                HttpServletResponse response) throws Exception {
        //指定行导出
        if (XaUtils.isNotEmpty(modelIds)) {
            /**
             * 导出指定行成为Excel格式
             * modelIds客户端使用逗号分割，这里就要用数组接收
             */
            Query query = new Query();
            query.put("${pk.attrname}_IN", Lists.newArrayList(modelIds));
            List<${className}Entity> vos = ${classname}Service.queryList(query);
            ${classname}Service.exportsToExcels(vos, request, response, false);
        } else {
            //导出所有
            if (params.containsKey("searchParams")) {
                params.putAll(JSON.parseObject(params.get("searchParams")+"", Map.class));
                params.remove("searchParams");
            }
            for (Map.Entry<String,Object> item : params.entrySet()) {
                Object value = (item.getValue() == null || item.getValue().toString().equalsIgnoreCase("null")) ? "" : item.getValue();
                item.setValue(value);
            }
            List<${className}Entity> vos = ${classname}Service.queryList(params);
            ${classname}Service.exportsToExcels(vos, request, response,  isCvs == null ? false : isCvs);
        }
    }
}

package ${package}.api;

import java.util.List;
import java.util.Map;


import com.google.common.collect.Lists;
import ${package}.controller.AbstractController;
import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import ${package}.utils.PageUtils;
import ${package}.utils.Query;
import ${package}.utils.result.R;
import ${package}.utils.result.XaResult;
import ${package}.utils.validator.ValidatorUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.time.*;
import java.util.*;
import java.math.BigDecimal;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@CrossOrigin
@RequestMapping("/api/${pathName}")
@Api(value = "${pathName}", description = "${comments}", position = 1)
@SuppressWarnings("all")
public class Api${className}Controller {
    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 查询所有${comments}
     */
    @PostMapping("list")
    @ApiOperation(value = "查询所有${comments}信息")
    @ApiImplicitParam(paramType = "header", name = "token", value = "token", required = true)
    @ResponseBody
    public XaResult<List<${className}Entity>> list(
        @ApiParam("页号,字段名:pageCurrent,默认1,从第1页开始") @RequestParam(defaultValue = "1") Integer pageCurrent,
        @ApiParam("页长,字段名:pageSize,默认10") @RequestParam(defaultValue = "10") Integer pageSize,
        HttpServletRequest request
    ) {
        XaResult<List<${className}Entity>> xr = new XaResult<>();
        Query query = new Query(pageCurrent,pageSize);
        xr.setObject(${classname}Service.queryList(query));
        return xr;
    }

    /**
     * 更新和保存
     */
    @ApiOperation(value = "${comments}更新和保存", notes = "${comments}更新和保存", position = 1)
    @ResponseBody
    @RequestMapping(value = "saveOrUpdate", method = RequestMethod.POST)
    @ApiImplicitParam(paramType = "header", name = "token", value = "token", required = true)
    public XaResult<${className}Entity> saveOrUpdate(
        #foreach ($column in $columns)
                @ApiParam("${column.comments},字段名:$column.attrname,${column.comments},如：") @RequestParam(defaultValue = "", required = false) $column.attrType $column.attrname,
        #end
            HttpServletRequest request
    ) {
        XaResult<${className}Entity> xr = new XaResult<>();
        ${className}Entity  ${classname}Entity = new ${className}Entity();
        #foreach ($column in $columns)
            ${classname}Entity.set${column.attrName}($column.attrname);
        #end
        ValidatorUtils.validateEntity(${classname}Entity);

        if (${pk.attrname} == null) {
            ${classname}Service.save(${classname}Entity);
        } else {
            ${classname}Service.update(${classname}Entity);
        }
        xr.setObject(${classname}Entity);
        return xr;
    }

   /**
    * 信息
    */
    @ApiOperation(value="${comments}详情",notes="详情")
    @ResponseBody
    @RequestMapping(value="find${className}By${pk.attrname}",method=RequestMethod.POST)
    public XaResult<${className}Entity> info (
            @ApiParam("主键,字段名:${pk.attrname},必填") @RequestParam(value = "${pk.attrname}") ${pk.attrType} ${pk.attrname}
     ){
        ${className}Entity ${classname} = ${classname}Service.queryObject(${pk.attrname});
        return new XaResult().success(${classname});
    }

   /**
    * 删除
    */
    @ApiOperation(value="根据${pk.attrname}修改${pathName}状态",notes="修改${pathName}状态,当返回的code=1时，保存成功后object返回对象")
    @ResponseBody
    @RequestMapping(value="operate${className}By${pk.attrname}",method=RequestMethod.POST)
    public XaResult info (
        @ApiParam("编号,字段名:modelIds,必填") @RequestParam(value = "modelId") ${pk.attrType}[] ${pk.attrname}s,
        @ApiParam("操作类型,字段名:status,-1锁定,0无效,1正常,2发布,3删除,选填,默认删除操作") @RequestParam(defaultValue = "3") Integer status
    ) {
        ${classname}Service.deleteBatch(${pk.attrname}s);
        return new XaResult<>().success(null);
    }
}

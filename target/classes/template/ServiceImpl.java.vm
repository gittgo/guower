package ${package}.service.impl;

import ${package}.utils.DateUtils;
import ${package}.utils.Query;
import ${package}.utils.XaUtils;
import ${package}.utils.Constant;
import ${package}.utils.beanmapper.BeanMapper;
import ${package}.utils.office.csvexports.CsvExportor;
import ${package}.utils.office.excelutils.ExcelColumn;
import ${package}.utils.office.excelutils.ExcelHead;
import ${package}.utils.office.excelutils.ExcelHelper;
import org.apache.poi.ss.usermodel.CellType;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.context.MessageSource;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;


import ${package}.dao.${className}Dao;
import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;

@Transactional
@Service("${classname}Service")
public class ${className}ServiceImpl implements ${className}Service {
    private Logger logger = LoggerFactory.getLogger(getClass());
	@Autowired
	private ${className}Dao ${classname}Dao;
    @Resource
    private BeanMapper beanMapper;
    @Resource
    private CsvExportor csvExportor;
    @Resource
    private MessageSource messageSource;

	@Override
	public ${className}Entity queryObject(${pk.attrType} ${pk.attrname}){
		return ${classname}Dao.queryObject(${pk.attrname});
	}
	
	@Override
	public List<${className}Entity> queryList(Map<String, Object> map){
		return ${classname}Dao.queryList(map);
	}
	
	@Override
	public int queryTotal(Map<String, Object> map){
		return ${classname}Dao.queryTotal(map);
	}
	
	@Override
	public void save(${className}Entity ${classname}){
		${classname}Dao.save(${classname});
	}

    @Override
    public void multiOperate(List<String> modelIds, Integer status) {
        if (XaUtils.isNotEmpty(modelIds)) {
            status = status == null ? Constant.Status.delete : status;
            Query query = new Query();
            query.put("${pk.attrname}_IN", modelIds);
            List<${className}Entity> entities =  ${classname}Dao.queryList(query);
            for (int i = 0, count = entities.size(); i < count; ++i) {
                ${className}Entity entity = entities.get(i);
                entity.setState(status);
                ${classname}Dao.update(entity);
            }
        }
    }

	@Override
	public void update(${className}Entity ${classname}){
        Objects.requireNonNull(${classname});
        final ${className}Entity dest = new ${className}Entity();
        Optional.ofNullable(${classname}.get${pk.attrName}()).ifPresent(a${pk.attrType} -> {
            ${className}Entity dests = Optional.ofNullable(${classname}Dao.queryObject(a${pk.attrType})).orElse(dest);
            beanMapper.copy(${classname}, dests);
            ${classname}Dao.update(dests);
        });
	}


	@Override
	public void delete(${pk.attrType} ${pk.attrname}){
		${classname}Dao.delete(${pk.attrname});
	}
	
	@Override
	public void deleteBatch(${pk.attrType}[] ${pk.attrname}s){
		${classname}Dao.deleteBatch(${pk.attrname}s);
	}

    /**
    * 导出成为excel
    * <p>
    * 导出数据不正确的几种情况分析
    * 1：要检查CellType是否使用正确，如要显示字符串您确使用 CellType.NUMERIC
    * 2：去确定转换函数（excelColumnsConvertMap）的泛型，如数据是整数Map<Integer,String>您确使用了Map<String,String>
    */
    @Override
    @SuppressWarnings("all")
    public void exportsToExcels(List<${className}Entity> vos, HttpServletRequest request, HttpServletResponse response , boolean isCvs) throws Exception {

        //excel结构
        List<ExcelColumn> excelColumns = new ArrayList<>();

        #foreach($column in $columns)
            #if(!$column.isNullable &&  ($column.attrType == 'String' || $column.attrType == 'Date' || $column.attrType == 'LocalDate'  || $column.attrType == 'LocalDateTime'  || $column.attrType == 'Clock'  || $column.attrType == 'BigDecimal'))
                ##excelColumns.add(new ExcelColumn(NumberUtils.toInt($velocityCount)+"" - 1, "${column.attrname}", "${column.comments}", CellType.STRING));
                excelColumns.add(new ExcelColumn(excelColumns.size(), "${column.attrname}", "${column.comments}", CellType.STRING));
            #else
                excelColumns.add(new ExcelColumn(excelColumns.size(), "${column.attrname}", "${column.comments}", CellType.NUMERIC));
            #end
        #end

        // 需要特殊转换的单元 map的可以必须好实体的类型一致
		// 一下excelColumnsConvertMap 转换的根据实际情况使用，这里是示例
        Map<String, Map> excelColumnsConvertMap = new HashMap<>();

        Map<String, String> isReceive1 = new HashMap<>();
        /**
         * {@link Constant.OrderStatus}
         */
         /*
        isReceive1.put("0", "未支付");
        isReceive1.put("1", "已支付");
        isReceive1.put("2", "待收货");
        isReceive1.put("3", "已经消费/已经收货");
        isReceive1.put("4", "交易完成");
        isReceive1.put("5", "交易关闭");
        excelColumnsConvertMap.put("orderState", isReceive1);*/

        /**
         * {@link Constant.PayType}
         */
        /*Map<Integer, String> isReceive2 = new HashMap<>();
        try {
            Map<Integer, String> map = ReflectUtils.covetConstaintClassToMap(Constant.PayType.class);
            isReceive2.putAll(map);
            excelColumnsConvertMap.put("paymentKind", isReceive2);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RRException(e.getLocalizedMessage());
        }*/

        //转换函数
        Map<String, ExcelColumCellInterface> excelColumnsConvertFunMap = new HashMap<>();
        //excelColumnsConvertFunMap.put("orderState", new ExcelHead.ExcelColumCellDate());
        //excelColumnsConvertFunMap.put("clearingmoney", new ExcelHead.ExcelColumCellBigDecimal("元"));

        //class类型抓换函数
        //Map<Class, ExcelColumCellInterface> columnsTypeConvertFunMap = new HashMap<>();
        //columnsTypeConvertFunMap.put(LocalDateTime.class, new ExcelHead.ExcelColumCellLocalDateTime());

        //设置头部
        ExcelHead head = new ExcelHead();
        head.setRowCount(1); // 模板中头部所占行数
        head.setColumns(excelColumns);  // 列的定义
        head.setColumnsConvertMap(excelColumnsConvertMap); // 列的转换byMap
        head.setColumnsConvertFunMap(excelColumnsConvertFunMap); // 列的转换by 接口方法
        //执行导出,第一个null是response参数，用来输出到浏览器，第二个null是要导出的数据集合
        if (isCvs) {
            ExcelHelper.getInstanse().exportCsvFile(csvExportor, request, response, head, vos,
                    "${comments}-" + DateUtils.parseDateTime(new Date(), DateUtils.YYYYMMDDHHMMSSCn));
        } else {
            ExcelHelper.getInstanse().exportExcelFile(request, response, head, vos,
                    "${comments}-" + DateUtils.parseDateTime(new Date(), DateUtils.YYYYMMDDHHMMSSCn));
        }

    }

}
